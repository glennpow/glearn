#!/usr/bin/env python

import os
import argparse
from rcall import meta
from glearn.train import train as local_train, remote_train
from glearn.utils.subprocess_utils import parse_command_args


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")

    parse_command_args(parser, [train, deploy])


def get_root_dir():
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")


def train(args):
    config_path = args.config
    version = args.version
    render = not args.no_render
    profile = args.profile

    local_train(config_path, version=version, render=render, profile=profile)


def train_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--version", "-v", default=None)
    parser.add_argument("--no-render", action="store_true")
    parser.add_argument("--profile", action="store_true")


train.usage = train_usage


def deploy(args):
    config_path = args.config
    backend = args.backend

    job_name = os.path.splitext(os.path.basename(config_path))[0]
    config_path = os.path.relpath(config_path, os.path.dirname(__file__))

    meta.call(
        backend=backend,
        fn=remote_train,
        kwargs=dict(config_path=config_path),
        log_relpath=job_name,
        job_name=job_name,
    )


def deploy_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--backend", "-b", type=str, default="local")


deploy.usage = deploy_usage


if __name__ == "__main__":
    main()
