#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
from glearn.menu import menu as local_menu
from glearn.train import train as local_train
from glearn.evaluate import evaluate as local_evaluate
from glearn.tensorboard import tensorboard as local_tensorboard
from glearn.utils.subprocess_utils import parse_command_args

try:
    from rcall import meta
except ModuleNotFoundError:
    meta = None


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument("--daemon", action="store_true")

    parse_command_args(parser, [menu, train, evaluate, tb, deploy], default="menu")


def get_root_dir():
    return os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")


def handle_daemon(args):
    if args.daemon:
        # start a daemonized version of command and exit
        cmd = sys.argv
        cmd.remove("--daemon")
        log_file_name = "log.txt"

        with open(log_file_name, "w") as log_file:
            p = subprocess.Popen(cmd, stdin=subprocess.DEVNULL, stdout=log_file, stderr=log_file,
                                 start_new_session=True)
            print(f"Spawned daemon process [{p.pid}]: '{' '.join(cmd)}' > '{log_file_name}'")
        sys.exit(0)


def menu(args):
    local_menu()


def train(args):
    handle_daemon(args)

    config_path = args.config
    version = args.version
    render = args.render
    debug = args.debug
    profile = args.profile

    local_train(config_path, version=version, render=render, debug=debug, profile=profile)


def train_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--version", "-v", default=None)
    parser.add_argument("--render", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--profile", action="store_true")


train.usage = train_usage


def evaluate(args):
    handle_daemon(args)

    config_path = args.config
    version = args.version
    render = not args.no_render
    debug = args.debug
    random = args.random

    local_evaluate(config_path, version=version, render=render, debug=debug, random=random)


def evaluate_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--version", "-v", default=None)
    parser.add_argument("--no-render", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--random", action="store_true")


evaluate.usage = evaluate_usage


def tb(args):
    handle_daemon(args)

    config_path = args.config
    version = args.version

    local_tensorboard(config_path, version=version)


def tb_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--version", "-v", default=None)


tb.usage = tb_usage


def deploy(args):
    if meta is None:
        print("The deploy command is not supported without the 'rcall' package")
        return

    config_path = args.config
    backend = args.backend

    job_name = os.path.splitext(os.path.basename(config_path))[0]
    config_path = os.path.relpath(config_path, os.path.dirname(__file__))

    meta.call(
        backend=backend,
        fn=local_train,
        kwargs=dict(config_path=config_path),
        log_relpath=job_name,
        job_name=job_name,
    )


def deploy_usage(parser):
    parser.add_argument("config", type=str)
    parser.add_argument("--backend", "-b", type=str, default="local")


deploy.usage = deploy_usage


if __name__ == "__main__":
    main()
